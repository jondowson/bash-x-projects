function fp_S3_write_script_heredoc(){

local array_count;

# Write the cronjob script to the scripts folder on each TC6000 VM.
#   - /home/omndocker/scripts/network_connectivity_checker_cronjob.bash
# - This script has all the connectivity tests tailored for each VM at the time of the last run of the Jenkins pipeline.
# - The results of this script are written to a prometheus export folder.
#   - /var/lib/prometheus/textfile_collector/network_connectivity_checker.prom
# - The names of the files and the paths are specified in the help.json for this project. 

# [0] Write the bash script.
# Note:
# - variables that are escaped are resolved when the script is run by the cronjob.
# - variables that are not escaped are resolved at the time of script creation. 
#   - this happens on the remote machine so paths are tailored for each machine.

# Change script path depending on local or remote creation.
if [[ "${vf_framework_flags_behaviour_remotecompute}" == "true" ]];then
    # On remote machine we create a tmp file and finally move it to the final .sh version. 
    script_path_tmp="${vp_path_file_cronjob}.tmp";
    script_path="${vp_path_file_cronjob}.sh";
else
    # Locally we write directly into the final .sh version, so these two vars are the same path.
    script_path_tmp="${vp_path_folder_timestamp_tests}${loop_source_hostname}.sh";
    script_path="${vp_path_folder_timestamp_tests}${loop_source_hostname}.sh";
fi;

printf "%s\n\n" "#!/usr/bin/env bash"                        > "${script_path_tmp}";
printf "%s\n"   "# About:"                                  >> "${script_path_tmp}";
printf "%s\n"   "# - This file was generated by the bash-x project 'network-connectivity-checker'."  >> "${script_path_tmp}";
printf "%s\n"   "# - Created: $(date)"                      >> "${script_path_tmp}";
printf "%s\n"   "declare -A A_bespoke_tests;"               >> "${script_path_tmp}";
printf "%s\n"   "declare -A A_bespoke_tests_refreshed;"     >> "${script_path_tmp}";
printf "%s\n"   "declare -A A_results;"                     >> "${script_path_tmp}";
printf "%s\n"   "declare -A A_containers;"                  >> "${script_path_tmp}";
printf "%s\n"   "declare -a a_containerlist;"               >> "${script_path_tmp}";

cat <<EOF >> "${script_path_tmp}"

# ================================================================
# [1] Inline function to write test result entry to the prometheus file.
function write_prometheus_file(){

# ---------------------------------------------------------------
# Assign passed parameter.
test_result="\${1}";

# ---------------------------------------------------------------
# Create helpful message string for logs.

# If the ip route check failed then the test result integer is incremented.
# 0 = test passed and using correct route
# 1 = test failed but using correct route
# 2 = test passed but using incorrect route
# 3 = test failed and using incorrect route.

# No gateway used, i.e. a direct connection within the same cluster.
if [[ "\${iproute_check_count}" == "2" ]];then

    # Check that the local interface and local ip are correct.
    if [[ "\${iproute_check}" != "\${source_interface} \${source_pubIp}" ]];then
        test_result=\$((test_result+2));
    fi;

# Gateway is required if three values returned from 'ip route get' command.
# - Check that local interface and local ip are correct.
elif [[ "\${iproute_check_count}" == "3" ]];then
    
    # Bespoke code for TC6000 - For 'GRUMPY' containers.
    # - Subtract one from the number of the host VM eth card and re-check against the iproute_check. 
    # - If mismatch then add 2 to the following message score.
    if [[ "\${vj_tests_platform}" == "TC6000" ]] && [[ "\${test:0:1}" == "c" ]] && [[ "\${container_type}" == *"GRUMPY"* ]];then
        
        card_id_vm=\${source_interface//[0-9]/};
        card_number_vm=\${source_interface//[!0-9]/};
        card_number_docker=\$((card_number_vm-1));
        if [[ "\${iproute_check}" != "\${source_gateway} \${card_id_vm}\${card_number_docker} \${source_pubIp}" ]];then
            test_result=\$((test_result+2));
        fi; 
    
    # Default routing check. 
    elif [[ "\${iproute_check}" != "\${source_gateway} \${source_interface} \${source_pubIp}" ]];then
        test_result=\$((test_result+2));
    fi;
fi;

# Create helpful interpretation message to add to logs.
if   [[ "\${test_result}" == "0" ]];then
    message="test has passed and route is correct [\${iproute_check}]";
elif [[ "\${test_result}" == "1" ]];then
    message="test has failed but route is correct [\${iproute_check}]";
elif [[ "\${test_result}" == "2" ]];then
    message="test has passed but route has failed [\${iproute_check}]";
else    
    message="test has failed and route has failed [\${iproute_check}]";
fi;

# ---------------------------------------------------------------
# Print output to .prom file.

if [[ \${test} == "sping" ]];then

    # For each line in the results file.
    ping_min=\$(cat ${vp_path_file_prometheus_sping_raw} | grep "\${env^^}\${cluster^^}|\${source_pubIp}|\${target_parent^^}|\${target_pubIp}" | cut -d ',' -f5);
    ping_avg=\$(cat ${vp_path_file_prometheus_sping_raw} | grep "\${env^^}\${cluster^^}|\${source_pubIp}|\${target_parent^^}|\${target_pubIp}" | cut -d ',' -f6);
    ping_max=\$(cat ${vp_path_file_prometheus_sping_raw} | grep "\${env^^}\${cluster^^}|\${source_pubIp}|\${target_parent^^}|\${target_pubIp}" | cut -d ',' -f7);
    ping_std=\$(cat ${vp_path_file_prometheus_sping_raw} | grep "\${env^^}\${cluster^^}|\${source_pubIp}|\${target_parent^^}|\${target_pubIp}" | cut -d ',' -f8);
    ping_pcl=\$(cat ${vp_path_file_prometheus_sping_raw} | grep "\${env^^}\${cluster^^}|\${source_pubIp}|\${target_parent^^}|\${target_pubIp}" | cut -d ',' -f9);

    # Remove whitespace that has crept in.
    ping_min="\${ping_min#"\${ping_min%%[![:space:]]*}"}";
    ping_avg="\${ping_avg#"\${ping_avg%%[![:space:]]*}"}";
    ping_max="\${ping_max#"\${ping_max%%[![:space:]]*}"}";
    ping_std="\${ping_std#"\${ping_std%%[![:space:]]*}"}";
    ping_pcl="\${ping_pcl#"\${ping_pcl%%[![:space:]]*}"}";

    if [[ "\${ping_pcl}" == "100" ]]; then 
        test_result=\$((test_result+1));
    fi;

    # Create helpful interpretation message to add to logs.
    if   [[ "\${test_result}" == "0" ]];then
        message="test has passed and route is correct [\${iproute_check}]";
    elif [[ "\${test_result}" == "1" ]];then
        message="test has failed but route is correct [\${iproute_check}]";
    elif [[ "\${test_result}" == "2" ]];then
        message="test has passed but route has failed [\${iproute_check}]";
    else    
        message="test has failed and route has failed [\${iproute_check}]";
    fi;

    string1="tc6000_networkchecker_sping{message=\"\${message}\",test=\"\${test}\",env=\"\${env}\",cluster=\"\${cluster}\"";
    string2="source_interface=\"\${source_interface}\",target_interface=\"\${target_interface}\",source_host=\"\${source_hostname}\${source_domain}\",target_host=\"\${target_hostname}\${target_domain}\"";
    string3="source_gateway=\"\${source_gateway}\",source_gateway=\"\${source_gateway}\",target_gateway=\"\${target_gateway}\",source_pubip=\"\${source_pubIp}\",target_pubip=\"\${target_pubIp}\",testcase_description=\"\${testcase_description}\",testcase_type=\"\${testcase_type}\",testcase_direction=\"\${testcase_direction}\"";
    string4="ping_min=\"\${ping_min}\",ping_avg=\"\${ping_avg}\",ping_max=\"\${ping_max}\",ping_std=\"\${ping_std}\",ping_pcl=\"\${ping_pcl}\"}";
    printf "%s\n" "\${string1},\${string2},\${string3},\${string4} \${test_result}" > /dev/null >> "${vp_path_file_prometheus_sping}.tmp";
else
    echo "tc6000_networkchecker{message=\"\${message}\",test=\"\${test}\",env=\"\${env}\",cluster=\"\${cluster}\",source_interface=\"\${source_interface}\",target_interface=\"\${target_interface}\",source_host=\"\${source_hostname}\${source_domain}\",target_host=\"\${target_hostname}\${target_domain}\",source_gateway=\"\${source_gateway}\",target_gateway=\"\${target_gateway}\",source_pubip=\"\${source_pubIp}\",target_pubip=\"\${target_pubIp}\",container_type=\"\${container_type}\",testcase_description=\"\${testcase_description}\",testcase_type=\"\${testcase_type}\",testcase_direction=\"\${testcase_direction}\"} \${test_result}" 2> /dev/null >> "${vp_path_file_prometheus}.tmp";
fi;
};

# ================================================================
# [2] Script starts here following the above inline function.
# Note:
# - variables that are escaped are resolved when the script is run by the cronjob.
# - variables that are not escaped are resolved at the time of script creation. 

# Create output files or clear them if they already exist. 
> "${vp_path_file_prometheus}.tmp";
> "${vp_path_file_prometheus_sping}.tmp";
> "${vp_path_file_prometheus_sping_raw}";
chmod +rw "${vp_path_file_prometheus}.tmp";
chmod +rw "${vp_path_file_prometheus_sping}.tmp";
chmod +rw "${vp_path_file_prometheus_sping_raw}";

# Use this to play/avoid certain tasks below based on the platform. 
vj_tests_platform=${vj_tests_platform};

EOF

# ================================================================
# [3] Write the array into the script for all the tests to run from this server.

array_count=0;
for p in ${!A_bespoke_tests[@]}
do 
    # For reference here are all the elements.
    # The iproute_check and iproute_check_count are initially blank 
    # But these are then refreshed when the script runs.

    # env="$(echo                         ${A_bespoke_tests[$p]} | cut -d ',' -f1)";
    # cluster="$(echo                     ${A_bespoke_tests[$p]} | cut -d ',' -f2)";
    # source_hostname="$(echo             ${A_bespoke_tests[$p]} | cut -d ',' -f3)";
    # source_domain="$(echo               ${A_bespoke_tests[$p]} | cut -d ',' -f4)";
    # target_hostname="$(echo             ${A_bespoke_tests[$p]} | cut -d ',' -f5)";
    # target_domain="$(echo               ${A_bespoke_tests[$p]} | cut -d ',' -f6)";
    # target_parent="$(echo               ${A_bespoke_tests[$p]} | cut -d ',' -f7)";
    # source_pubIp="$(echo                ${A_bespoke_tests[$p]} | cut -d ',' -f8)";
    # target_pubIp="$(echo                ${A_bespoke_tests[$p]} | cut -d ',' -f9)";
    # source_interface="$(echo            ${A_bespoke_tests[$p]} | cut -d ',' -f10)";
    # target_interface="$(echo            ${A_bespoke_tests[$p]} | cut -d ',' -f11)";
    # source_gateway="$(echo              ${A_bespoke_tests[$p]} | cut -d ',' -f12)";
    # target_gateway="$(echo              ${A_bespoke_tests[$p]} | cut -d ',' -f13)";
    # iproute_check="$(echo               ${A_bespoke_tests[$p]} | cut -d ',' -f14)";
    # iproute_check_count="$(echo         ${A_bespoke_tests[$p]} | cut -d ',' -f15)";
    # testcase_description="$(echo        ${A_bespoke_tests[$p]} | cut -d ',' -f16)";
    # test="$(echo                        ${A_bespoke_tests[$p]} | cut -d ',' -f17)";
    # testcase_type="$(echo               ${A_bespoke_tests[$p]} | cut -d ',' -f18)";
    # testcase_direction="$(echo          ${A_bespoke_tests[$p]} | cut -d ',' -f19)";
    # testcase_cfilter_type="$(echo       ${A_bespoke_tests[$p]} | cut -d ',' -f20)";
    # testcase_cfilter_strategy="$(echo   ${A_bespoke_tests[$p]} | cut -d ',' -f21)";
    # testcase_cfilter_grepon="$(echo     ${A_bespoke_tests[$p]} | cut -d ',' -f22)";

    # Write to the script each line of the test array that will be run by the cronjob.
    printf "%s\n" "A_bespoke_tests[$array_count]=\"$(echo ${A_bespoke_tests[$p]} | xargs)\";" >> "${script_path_tmp}"; 
    ((array_count++));
done;

# ================================================================
# [4] Write the rest of the script to the cronjob file.

cat <<EOF >> "${script_path_tmp}"

# ---------------------------------------------------------------
# [3.1] Get paths to these apps on VM.

vm_cmd_docker=\$(which docker)   || vm_cmd_docker="docker";
vm_cmd_ping=\$(which ping)       || vm_cmd_ping="ping";
vm_cmd_bash=\$(which bash)       || vm_cmd_bash="bash";
vm_cmd_ip=\$(which ip)           || vm_cmd_ip="ip";
vm_cmd_timeout=\$(which timeout) || vm_cmd_timeout="timeout";

# ---------------------------------------------------------------
# [3.2] Create array of command paths for each type of container on the VM.

# Check if there is at least one container test to perform.
loop_containers="false";
for p in \${!A_cronjob_results[@]}
do
    test="\$(echo \${A_cronjob_results[\$p]}  | cut -d ',' -f17 | awk '{\$1=\$1};1')";
    if [[ \${test} == "c"* ]];then
        loop_containers="true";
        break;
    fi;
done;

# There is at least one container test to run so loop through all containers to establish the command paths for the following utilities.
if [[ "\${loop_containers}" == "true" ]];then

    a_containerlist=( \$(\${vm_cmd_docker} ps | awk '{print $1}' | grep -v CONTAINER) );

    for cid in \${a_containerlist[@]}
    do
        # Two approaches for identifying the container type as specified in the tests.json.
        if [[ "\${testcase_cfilter_strategy}" == "container_environment_variable" ]];then
            cont_type=\$(\${vm_cmd_docker} exec -i \${cid} env | grep \${testcase_cfilter_grepon} | cut -d'=' -f2);
        elif [[ "\${testcase_cfilter_strategy}" == "container_listing" ]];then
            cont_type=\$(\${vm_cmd_docker} ps | awk '{print \$1}' | grep -v CONTAINER | grep \${testcase_cfilter_grepon});        
        fi;

        # Only need one container of each type to establish command paths.
        if [[ "\${cont_type}" != "" ]];then
            [[ "\${A_containers[\${cont_type}]+abc}" ]] && exists="true" || exists="false";
            if [[ "\${exists}" == "false" ]];then
                container_commands=\$(\${vm_cmd_docker} exec -i \${cid} /usr/bin/which nc ping bash timeout ip);
                c_cmd_netcat=\$(echo \${container_commands}  | cut -d ' ' -f1);
                c_cmd_ping=\$(echo \${container_commands}    | cut -d ' ' -f2);
                c_cmd_bash=\$(echo \${container_commands}    | cut -d ' ' -f3);
                c_cmd_timeout=\$(echo \${container_commands} | cut -d ' ' -f4);
                c_cmd_ip=\$(echo \${container_commands}      | cut -d ' ' -f5);
                A_containers["\${cont_type}"]="\${cid},\${cont_type},\${c_cmd_netcat},\${c_cmd_ping},\${c_cmd_bash},\${c_cmd_timeout},\${c_cmd_ip}";
            fi;
        fi;
    done;
fi;

# ---------------------------------------------------------------
# [3.3] This is bespoke code for TC6000 platform only.

if [[ "\${vj_tests_platform}" == "TC6000" ]];then 

    # If oasis then grab container id and check if VM is running the master oasis container.
    if [[ "\${cont_type}" == "OASIS" ]];then 
        oa_cid="\${cid}";
        oa_master=\$(\${vm_cmd_docker} exec -i \${cid} /apps/omn/bin/hci -is_master | grep 'this_is_master: yes');
        if [[ \${oa_master} == "" ]]; then 
            oa_master="false"; 
        else 
            oa_master="true";
        fi;
    fi;
fi;

# ---------------------------------------------------------------
# [3.4] Process the bespoke_tests array and run the connectivity test.

for p in \${!A_bespoke_tests[@]}
do
    # Reset these for loop iteration.
    container_id="";
    container_type="";
    result="";
    res="";
    
    # Grab each value stored in the array and assign its comma delimitted strings.
    # - These values are refreshed with each run of the Jenkins pipeline.
    # - Only the 'iproute_check' + 'iproute_check_count' will be refreshed each time the script is run.

    env="\$(echo                       \${A_bespoke_tests[\$p]} | cut -d ',' -f1)";
    cluster="\$(echo                   \${A_bespoke_tests[\$p]} | cut -d ',' -f2)";
    source_hostname="\$(echo           \${A_bespoke_tests[\$p]} | cut -d ',' -f3)";
    source_domain="\$(echo             \${A_bespoke_tests[\$p]} | cut -d ',' -f4)";
    target_hostname="\$(echo           \${A_bespoke_tests[\$p]} | cut -d ',' -f5)";
    target_domain="\$(echo             \${A_bespoke_tests[\$p]} | cut -d ',' -f6)";
    target_parent="\$(echo             \${A_bespoke_tests[\$p]} | cut -d ',' -f7)";
    source_pubIp="\$(echo              \${A_bespoke_tests[\$p]} | cut -d ',' -f8)";
    target_pubIp="\$(echo              \${A_bespoke_tests[\$p]} | cut -d ',' -f9)";
    source_interface="\$(echo          \${A_bespoke_tests[\$p]} | cut -d ',' -f10)";
    target_interface="\$(echo          \${A_bespoke_tests[\$p]} | cut -d ',' -f11)";
    source_gateway="\$(echo            \${A_bespoke_tests[\$p]} | cut -d ',' -f12)";
    target_gateway="\$(echo            \${A_bespoke_tests[\$p]} | cut -d ',' -f13)";
    iproute_check="\$(echo             \${A_bespoke_tests[\$p]} | cut -d ',' -f14)"; 
    iproute_check_count="\$(echo       \${A_bespoke_tests[\$p]} | cut -d ',' -f15)";   
    testcase_description="\$(echo      \${A_bespoke_tests[\$p]} | cut -d ',' -f16)";
    test="\$(echo                      \${A_bespoke_tests[\$p]} | cut -d ',' -f17)";
    testcase_type="\$(echo             \${A_bespoke_tests[\$p]} | cut -d ',' -f18)";
    testcase_direction="\$(echo        \${A_bespoke_tests[\$p]} | cut -d ',' -f19)";
    testcase_cfilter_type="\$(echo     \${A_bespoke_tests[\$p]} | cut -d ',' -f20)";
    testcase_cfilter_strategy="\$(echo \${A_bespoke_tests[\$p]} | cut -d ',' -f21)";
    testcase_cfilter_grepon="\$(echo   \${A_bespoke_tests[\$p]} | cut -d ',' -f22)";

    # ---------------------------------------------------------------
    # Get container id and app paths for container tests. 
    if [[ "\${testcase_cfilter_type}" == "" ]];then
        container_type="HOST";
    else
        container_id="\$(echo   \${A_containers[\${testcase_cfilter_type}]} | cut -d ',' -f1)";
        container_type="\$(echo \${A_containers[\${testcase_cfilter_type}]} | cut -d ',' -f2)";
        c_cmd_netcat="\$(echo   \${A_containers[\${testcase_cfilter_type}]} | cut -d ',' -f3)";
        c_cmd_ping="\$(echo     \${A_containers[\${testcase_cfilter_type}]} | cut -d ',' -f4)";
        c_cmd_bash="\$(echo     \${A_containers[\${testcase_cfilter_type}]} | cut -d ',' -f5)";
        c_cmd_timeout="\$(echo  \${A_containers[\${testcase_cfilter_type}]} | cut -d ',' -f6)";
        c_cmd_ip="\$(echo       \${A_containers[\${testcase_cfilter_type}]} | cut -d ',' -f7)";         
    fi;

    # ---------------------------------------------------------------
    # [3.4.1] Bespoke CHECKS for TC6000 platform !!!!!!!

    if [[ "\${vj_tests_platform}" == "TC6000" ]];then 

        # CHECK 1: only run internal docker tests if target is at this time a 'leader' or 'receiver' node.
        if [[ "\${testcase_type}" == "internal_docker_leader" ]];then
            is_leader=\$(ssh -o StrictHostKeyChecking=no omndocker@\${target_pubIp} 'docker node inspect self --pretty');
            if [[ "\${is_leader}" == "" ]];then 
                ((semicolon_count++));
                continue;
            fi;

        # CHECK 2: only run legal interception test if VM is NOT host to the master oasis container.
        elif [[ "\${testcase_type}" == "li_provisioning" ]] && [[ "\${oa_master}" == "true" ]];then
            # Advance to next semicoon separated test if exists and jump to next iteration in loop.
            ((semicolon_count++));
            continue;
        fi;
   
        # CHECK 3: 'GRUMPY' container routing is different. Jump into these containers to get route rather than using host VM to discover.
        if [[ "\${vj_tests_platform}" == "TC6000" ]];then

            if [[ "\${testcase_cfilter_type}" == *"GRUMPY"* ]];then
                
                iproute_check=\$(\${vm_cmd_docker} exec -i \${container_id} \${c_cmd_ip} route get \${target_pubIp} | grep -v cache | awk {'print \$3,\$5,\$7'});
            
            # Check the routing for the target ip from the host VM and non-GRUMPY containers.
            else
                iproute_check="\$(\${vm_cmd_ip} route get \${target_pubIp} | grep -v cache | awk {'print \$3,\$5,\$7'})";
            fi; 
        fi;
    fi;

    # ---------------------------------------------------------------
    # Remove trailing and then leading white space. 
    # Count substrings. If 2 then no gateway used in ip route. If 3 then gateway is used.

    iproute_check="\${iproute_check#"\${iproute_check%%[![:space:]]*}"}";
    iproute_check="\${iproute_check%"\${iproute_check##*[![:space:]]}"}"; 
    iproute_check_count="\$(echo "\${iproute_check}" | tr " " "\n" | wc -l)";

    # This array has a refreshed iproute_check and iproute_check_count values.
    A_bespoke_tests_refreshed["\${p}"]="\$env,\$cluster,\$source_hostname,\$source_domain,\$target_hostname,\$target_domain,\$target_parent,\$source_pubIp,\$target_pubIp,\$source_interface,\$target_interface,\$source_gateway,\$target_gateway,\$iproute_check,\$iproute_check_count,\$testcase_description,\$test,\$testcase_type,\$testcase_direction,\$testcase_cfilter_type,\$testcase_cfilter_strategy,\$testcase_cfilter_grepon";

    # ---------------------------------------------------------------
    # Select on the type of test.
    case "\${test}" in

    # sping: a statistical ping over 10 pings to establish latency average.
    #   - as it takes longer to run this type of test, the results are posted to a separate prometheus file.
    # cping: a ping from within a container.
    # cudp-: a netcat udp test to a port from within a container.
    # ctcp-: a bash tcp test to a port from within a container.
    # Equivalant tests without the preceeding 'c' are made from the host VM.

    # ---------------------------------------------------------------
        "sping")
            result=\$(\${vm_cmd_ping} -c 10 -W 1 \${target_pubIp}) && res="\${result##*=}"; 
            res="\${res%\ ms*}"; 
            res="\${res//\//|}"; 
            res="\${res#"\${res%%[![:space:]]*}"}"; 
            pcl="\${result#*received,\ }"; 
            pcl="\${pcl%%\%*}"; 
            pcl="\${pcl##*errors,\ }";
            final_string="\${res}|\${pcl}" || res="\${result##*=}"; 
            res="\${res%\ ms*}"; 
            res="\${res//\//|}"; 
            res="\${res#"\${res%%[![:space:]]*}"}"; 
            pcl="\${result#*received,\ }"; 
            pcl="\${pcl%%\%*}"; 
            pcl="\${pcl##*errors,\ }";
            # It did not work so set fail string with score of 100. 
            if [[ "\${res}" == "" ]]; then 
                final_string="0|0|0|0|100";
            else
                final_string="\${res}|\${pcl}";
            fi; 
            printf "%s\n" "\${env^^}\${cluster^^}|\${source_pubIp}|\${target_parent^^}|\${target_pubIp}|\${final_string}|sping" >> "${vp_path_file_prometheus_sping_raw}" > /dev/null 2>&1 &
            ;;
    # ---------------------------------------------------------------    
        "cping")
            \${vm_cmd_docker} exec -i \${container_id} \${c_cmd_ping} -c 1 \${target_pubIp} > /dev/null 2>&1 &
            ;;
    # ---------------------------------------------------------------    
        "ping")
            \${vm_cmd_ping} -c 1 -W 1 \${target_pubIp} > /dev/null 2>&1 &
            ;;
    # ---------------------------------------------------------------
        cudp-*)
            target_port=\${test##*-};
            \${vm_cmd_docker} exec -i \${container_id} \${c_cmd_netcat} -u -z -w 3 \${target_pubIp} \${target_port} > /dev/null 2>&1 &
            ;;
    # ---------------------------------------------------------------
        udp-*)
            target_port=\${test##*-};
            \${vm_cmd_netcat} -v -u -z -w 3 \${target_pubIp} \${target_port} > /dev/null 2>&1 &
            ;;
    # ---------------------------------------------------------------
        ctcp-*)
            target_port=\${test##*-};
            \${vm_cmd_docker} exec -i \${container_id} \${c_cmd_timeout} 1 \${c_cmd_bash} -c "</dev/tcp/\${target_pubIp}/\${target_port}" > /dev/null 2>&1 &
            ;;
    # ---------------------------------------------------------------
        tcp-*)
            target_port=\${test##*-};
            \${vm_cmd_timeout} 1 \${vm_cmd_bash} -c "</dev/tcp/\${target_pubIp}/\${target_port}" > /dev/null 2>&1 &
            ;;        
    # ---------------------------------------------------------------
    esac;
    pid="\${!}";
    A_results[\$pid]="\${p},\${container_type}";
done;   

# ---------------------------------------------------------------
# [3.4] Wait for all pids to finish.

for pid in "\${!A_results[@]}"
do
    # Wait for pid to complete.
    wait "\${pid}";
    errcode="\${?}";
    bespoke_tests_refreshed_index="\$(echo "\${A_results[\${pid}]}" | cut -d ',' -f1)";
    container_type="\$(echo                "\${A_results[\${pid}]}" | cut -d ',' -f2)";
    
    env="\$(echo                       "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f1)";
    cluster="\$(echo                   "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f2)";
    source_hostname="\$(echo           "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f3)";
    source_domain="\$(echo             "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f4)";
    target_hostname="\$(echo           "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f5)";
    target_domain="\$(echo             "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f6)";
    target_parent="\$(echo             "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f7)";
    source_pubIp="\$(echo              "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f8)";
    target_pubIp="\$(echo              "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f9)";
    source_interface="\$(echo          "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f10)";
    target_interface="\$(echo          "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f11)";
    source_gateway="\$(echo            "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f12)";
    target_gateway="\$(echo            "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f13)";
    iproute_check="\$(echo             "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f14)"; 
    iproute_check_count="\$(echo       "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f15)";   
    testcase_description="\$(echo      "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f16)";
    test="\$(echo                      "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f17)";
    testcase_type="\$(echo             "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f18)";
    testcase_direction="\$(echo        "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f19)";
    testcase_cfilter_type="\$(echo     "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f20)";
    testcase_cfilter_strategy="\$(echo "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f21)";
    testcase_cfilter_grepon="\$(echo   "\${A_bespoke_tests_refreshed[\${bespoke_tests_refreshed_index}]}" | cut -d ',' -f22)";

    if [[ "\${errcode}" == "0" ]];then
        score="0";
    else             
        score="1";
    fi;
    write_prometheus_file "\${score}";
done;

# ---------------------------------------------------------------
# [3.5] Copy the tmp files to their final paths.

# Remove the temporary ping stats file if it exists.
if [[ -f "${vp_path_file_prometheus_sping_raw}" ]];then 
    rm "${vp_path_file_prometheus_sping_raw}";
fi;

# Prometheus metric files.
mv "${vp_path_file_prometheus}.tmp" "${vp_path_file_prometheus}";
mv "${vp_path_file_prometheus_sping}.tmp" "${vp_path_file_prometheus_sping}";
chmod +rw "${vp_path_file_prometheus}";
chmod +rw "${vp_path_file_prometheus_sping}";
EOF

# Extra step when running remotely.
if [[ "${vf_framework_flags_behaviour_remotecompute}" == "true" ]];then
    mv "${script_path_tmp}" "${script_path}";
fi;

# Make file executable.
chmod +x "${script_path}";
};
